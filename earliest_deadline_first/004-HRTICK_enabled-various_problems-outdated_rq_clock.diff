From 878c2a76ea53d0170a377a4e6c1ed7dd09758cbf Mon Sep 17 00:00:00 2001
From: Tadeus Prastowo <eus@member.fsf.org>
Date: Wed, 15 Jun 2011 12:54:32 +0200
Subject: [PATCH 1/3] Fix the following problem:
 1. DL task A is currently running.
 2. DL task B completes its clock_nanosleep and found that:
    runtime / deadline <= dl_runtime / dl_deadline
    1120 / 5931 <= 2000 / 5000 (all in microsecond)
 3. DL task A keeps running (e.g., for 1200 us) because its deadline is
    earlier than B.
 4. DL task A completes and DL task B is picked.
 5. DL task B is treated as having been running for 1200 us since Step
    2 because rq->clock is not updated when task B is picked at Step
    4. This causes task B to miss its deadline because it cannot use
    the remaining 1120 us of runtime.

---
 kernel/sched_dl.c |    3 +++
 1 files changed, 3 insertions(+), 0 deletions(-)

diff --git a/kernel/sched_dl.c b/kernel/sched_dl.c
index 9d0443e..f0ded38 100644
--- a/kernel/sched_dl.c
+++ b/kernel/sched_dl.c
@@ -515,7 +515,10 @@ struct task_struct *pick_next_task_dl(struct rq *rq)
 	BUG_ON(!dl_se);
 
 	p = dl_task_of(dl_se);
+
+	update_rq_clock(rq);
 	p->se.exec_start = rq->clock;
+
 #ifdef CONFIG_SCHED_HRTICK
 	if (hrtick_enabled(rq))
 		start_hrtick_dl(rq, p);
-- 
1.7.1

