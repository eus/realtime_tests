		Constant Bandwidth Server Inheritance
		   for Client-Server Communication
----------------------------------------------------------------------

This experimentation unit requires the Linux kernel found in
git://gitorious.org/sched_deadline/linux-deadline.git
in branch latest/2.6.36-dl-V3 at commit
f2ebcfd122cdab46f1e9eabe91e1549285b5a00b.

This experiment consists of several sub-experiments. All
sub-experiments are concerned about BWI for client-server
communication, such as RPC (Remote Procedure Call) or the
communication between an X server and its clients.

[Sub-experiment 1]
First, a server accepting and responding to UDP packet and a CPU
hogger performing an infinite loop are run.
Then, a client task is run using a CBS server whose Q_s is 19 ms and
T_s is 30 ms (i.e., the CPU utilitization U_s is 63%) mimicking a
multimedia application that has to render 30 frames per second.

The client task itself consists of three consecutive parts:
1. Prologue that runs for 5 ms if it monopolizes the CPU.
2. Service  that runs for 9 ms if it monopolizes the CPU.
3. Epilogue that runs for 5 ms if it monopolizes the CPU.
------------------------------------------------------- +
With a total duration of 19 ms if it monopolizes the CPU.

The second part, however, happens in the server. To initiate the
second part, the client task sends a UDP packet to the server before
blocking waiting for the server respond.

This sub-experiment is run by: sudo ./main-1

The result will be file subexperiment_01.bin that can be read using
read_task_stats_file executable. In particular, the cummulative
distribution frequency (CDF) plot can be generated by running file
cdf.m produced by the following command, in GNU Octave:
../read_task_stats_file subexperiment_01.bin | tail -n 1 > cdf.m

The expected CDF graph of the client's response time is a slope after
19 ms as opposed to a vertical line at 19 ms.

[Sub-experiment 2]
Same as sub-experiment 1 except that the second part of the client is
done by the server under BWI inheriting the client's CBS server.

This sub-experiment is run by: sudo ./main-2
The result will be file subexperiment_02.bin.
The expected CDF graph of the client's response time is a vertical
line at 19 ms.

[Sub-experiment 3]
Same as sub-experiment 1 but an additional CPU hogger is run using a
CBS server whose Q_s is 5 ms and T_s is 30 ms such that its bandwidth
is 16.67%. When the SCHED_DEADLINE kernel is using the original CBS
replenishment behavior (work conserving mode), the CBS CPU hogger will
prevent the server from being run at all, and therefore, the client
will only be able to complete one prologue-service-epilogue that is
late. When the SCHED_DEADLINE kernel is using the hard CBS
replenishment behavior (non-work conserving mode), the client would
have a larger response time compared to the one obtained in
sub-experiment 1.

This sub-experiment is run by: sudo ./main-3
The result will be file subexperiment_03.bin.
Running "read_task_stats_file subexperiment_03.bin" will show only
one late completed job in work conserving mode.
In non-work conserving mode, the expected CDF graph of the client's
response time is a less steeper slope after 19 ms compared to the CDF
graph of sub-experiment 1.

[Sub-experiment 4]
Same as sub-experiment 3 except that the second part of the client is
done by the server under BWI inheriting the client's CBS server.

This sub-experiment is run by: sudo ./main-4
The result will be file subexperiment_04.bin.
The expected CDF graph of the client's response time is a vertical
line at 19 ms.

[Sub-experiment 5]
Same as sub-experiment 3 but instead of a CPU hogger, a HRT CBS is
used instead (a HRT CBS never postpones its deadline).

This sub-experiment is run by: sudo ./main-5
The result will be file subexperiment_05.bin.
The expected CDF graph of the client's response time is a slope after
19 ms.

[Sub-experiment 6]
Same as sub-experiment 5 except that the second part of the client is
done by the server under BWI inheriting the client's CBS server.

This sub-experiment is run by: sudo ./main-6
The result will be file subexperiment_06.bin.
The expected CDF graph of the client's response time is not a vertical
line at 19 ms because there is a competing HRT server. Nevertheless,
the CDF should end at one at a time t less than or equal to 30 ms.
